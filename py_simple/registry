# registry_simulator.py
import winreg
import random

class RegistrySimulator:
    def __init__(self):
        self.test_keys = []
    
    def simulate_persistence(self):
        """Simulate registry modifications for persistence"""
        try:
            # Create test registry entries (safe locations)
            test_locations = [
                (winreg.HKEY_CURRENT_USER, "Software\\TestRansomwareSimulator"),
                (winreg.HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\RunTest")
            ]
            
            for hive, subkey in test_locations:
                try:
                    key = winreg.CreateKey(hive, subkey)
                    winreg.SetValueEx(key, "TestValue", 0, winreg.REG_SZ, "EducationalSimulator")
                    winreg.CloseKey(key)
                    self.test_keys.append((hive, subkey))
                    print(f"Created test registry key: {subkey}")
                except Exception as e:
                    print(f"Registry operation failed: {e}")
                    
        except Exception as e:
            print(f"Registry simulation error: {e}")
    
    def cleanup_registry(self):
        """Remove test registry entries"""
        for hive, subkey in self.test_keys:
            try:
                winreg.DeleteKey(hive, subkey)
                print(f"Cleaned registry key: {subkey}")
            except Exception as e:
                print(f"Registry cleanup failed: {e}")

# Usage
reg_sim = RegistrySimulator()
reg_sim.simulate_persistence()
# Remember to call cleanup_registry() after testing
